openapi: 3.0.3
info:
  title: Kitepkana Project API
  version: 3.0.0
paths:
  /api/v1/add_star/:
    post:
      operationId: api_v1_add_star_create
      description: |
        Минимальное значение: 1

        Максимальное значение: 5

         В качестве значения ключа "book" пишется идентификатор книги [id]
      summary: Добавление оценки книге
      parameters:
      - in: header
        name: some_new_parameter
        schema:
          type: object
          additionalProperties: {}
        description: some new parameter for update post
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                star:
                  type: int
                book:
                  type: int
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/admin_panel/:
    get:
      operationId: api_v1_admin_panel_list
      summary: Метод для получения всех авторов, жанров, книг
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminPanel'
          description: ''
  /api/v1/alike_genre/:
    get:
      operationId: api_v1_alike_genre_list
      description: |-
        Необходимо передать параметр в запрос: genre_name=value

         Пример: http://localhost:8000/?query=Роман
      summary: Фильтрация по похожим жанрам
      parameters:
      - in: query
        name: Фильтрация по похожим жанрам
        schema:
          type: object
          additionalProperties: {}
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimilarGenre'
              examples:
                Пример:
                  value:
                  - genre_name: Pоман
          description: ''
  /api/v1/author_suggest/:
    get:
      operationId: api_v1_author_suggest_list
      description: |-
        Необходимо передать параметр в запрос: query=value

         Пример: http://localhost:8000/?query=Чингиз Айтматов
      summary: Фильтрация по автору
      parameters:
      - in: query
        name: Фильтрация по автору
        schema:
          type: object
          additionalProperties: {}
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples:
                Пример:
                  value:
                  - query: Чингиз Айтматов
          description: ''
  /api/v1/authors/:
    get:
      operationId: api_v1_authors_list
      summary: Метод для получения всех авторов
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorList'
          description: ''
  /api/v1/authors/{id}/:
    get:
      operationId: api_v1_authors_retrieve
      summary: Метод для получения детальной информации об авторе
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDetail'
          description: ''
  /api/v1/authors_filter/:
    get:
      operationId: api_v1_authors_filter_list
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authors
        schema:
          type: array
          items:
            type: string
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
  /api/v1/books/:
    get:
      operationId: api_v1_books_list
      summary: Метод для получения списка книг
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookList'
          description: ''
  /api/v1/books/{id}/:
    get:
      operationId: api_v1_books_retrieve
      description: Требуется указать идентификатор книги
      summary: Метод для получения детальной информации о книге
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetail'
          description: ''
  /api/v1/favorite/:
    get:
      operationId: api_v1_favorite_list
      summary: Метод для получения списка избранных книг
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Favorite'
          description: ''
    post:
      operationId: api_v1_favorite_create
      description: Если вы хотите добавить, то вам нужно указать идентификатор книги
      summary: Метод для добавления книг в избранное
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FavoriteCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FavoriteCreate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteCreate'
          description: ''
  /api/v1/favorite/{id}/:
    delete:
      operationId: api_v1_favorite_destroy
      description: Если вы хотите удалить, то вам нужно указать идентификатор книги
      summary: Метод удаления книги из избранных
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/finish_bookmark/:
    get:
      operationId: api_v1_finish_bookmark_list
      summary: Метод для получения списка книг из закладки "Прочитано"
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinishBookMark'
          description: ''
    post:
      operationId: api_v1_finish_bookmark_create
      description: Требуется указать только идентификатор книги
      summary: Метод для добавления книг в закладку "Прочитано"
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishBookMarkCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FinishBookMarkCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FinishBookMarkCreate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinishBookMarkCreate'
          description: ''
  /api/v1/genre_suggest/:
    get:
      operationId: api_v1_genre_suggest_list
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
  /api/v1/genres/:
    get:
      operationId: api_v1_genres_list
      summary: Метод для вывода списка жанров
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenreList'
          description: ''
  /api/v1/genres/{id}/:
    get:
      operationId: api_v1_genres_retrieve
      summary: Метод для получения детальной информации о жанре
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreDetail'
          description: ''
  /api/v1/genres_filter/:
    get:
      operationId: api_v1_genres_filter_list
      parameters:
      - in: query
        name: genre_name
        schema:
          type: string
          enum:
          - Биография
          - Боевик
          - Детектив
          - Мемуары
          - Мистика
          - Мифы. Легенды. Эпос
          - Повесть
          - Повседневность
          - Постмодернизм
          - Поэзия
          - Приключения
          - Проза
          - Роман
          - Романтическая комедия
          - Сатира
          - Сказка/Притча
          - Старинная литература
          - Трагедия
          - Триллер
          - Фикшн
          - Фэнтези
          - Хоррор/Ужасы
          - Эпопея
        description: |-
          Выбери жанр

          * `Фэнтези` - ФЭНТЕЗИ
          * `Роман` - РОМАН
          * `Эпопея` - ЭПОПЕЯ
          * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
          * `Сказка/Притча` - СКАЗКА/ПРИТЧА
          * `Боевик` - БОЕВИК
          * `Повесть` - ПОВЕСТЬ
          * `Мистика` - МИСТИКА
          * `Детектив` - ДЕТЕКТИВ
          * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
          * `Триллер` - ТРИЛЛЕР
          * `Фикшн` - ФИКШН
          * `Проза` - ПРОЗА
          * `Мемуары` - МЕМУАРЫ
          * `Трагедия` - ТРАГЕДИЯ
          * `Приключения` - ПРИКЛЮЧЕНИЯ
          * `Поэзия` - ПОЭЗИЯ
          * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
          * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
          * `Биография` - БИОГРАФИЯ
          * `Сатира` - САТИРА
          * `Постмодернизм` - ПОСТМОДЕРНИЗМ
          * `Повседневность` - ПОВСЕДНЕВНОСТЬ
      - in: query
        name: genres
        schema:
          type: array
          items:
            type: string
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genres'
          description: ''
  /api/v1/profile/:
    get:
      operationId: api_v1_profile_retrieve
      description: |-
        Вьюшка для того чтобы пользователь мог получать свои данные, а также
        изменять их
      summary: Метод для получения детальной информации о профиле пользователя
      tags:
      - api
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    put:
      operationId: api_v1_profile_update
      description: |-
        Вьюшка для того чтобы пользователь мог получать свои данные, а также
        изменять их
      summary: Метод для изменения профиля пользователя
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: api_v1_profile_partial_update
      description: |-
        Вьюшка для того чтобы пользователь мог получать свои данные, а также
        изменять их
      summary: Метод для частичного изменения профиля пользователя
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/v1/profile/delete/:
    delete:
      operationId: api_v1_profile_delete_destroy
      description: Вьюшка для удаления профиля пользователя
      summary: Метод для удаления профиля пользователя
      tags:
      - api
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/read_bookmark/:
    get:
      operationId: api_v1_read_bookmark_list
      summary: Метод для получения списка книг из закладки "Читаю"
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadingBookMark'
          description: ''
    post:
      operationId: api_v1_read_bookmark_create
      description: Требуется указать только идентификатор книги
      summary: Метод для добавления книг в закладку "Читаю"
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingBookMarkCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReadingBookMarkCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReadingBookMarkCreate'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingBookMarkCreate'
          description: ''
  /api/v1/recommended_books/:
    get:
      operationId: api_v1_recommended_books_list
      summary: Метод для получения рекомендованных книг
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookSimple'
          description: ''
  /api/v1/reviews/:
    get:
      operationId: api_v1_reviews_list
      summary: Метод для получения списка отзывов
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewCreate'
          description: ''
    post:
      operationId: api_v1_reviews_create
      description: Требуется заполнить соответсвующее поля
      summary: Метод для создания отзыва
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
  /api/v1/reviews/{id}/:
    get:
      operationId: api_v1_reviews_retrieve
      description: Требуется указать идентификатор отзыва
      summary: Детальная информация об отзыве
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Отзыв.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
    put:
      operationId: api_v1_reviews_update
      description: Требуется указать идентификатор отзыва
      summary: Метод для изменение отзыва
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Отзыв.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
    patch:
      operationId: api_v1_reviews_partial_update
      description: Требуется указать идентификатор отзыва
      summary: Метод для частичного изменения отзыва
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Отзыв.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewCreate'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreate'
          description: ''
    delete:
      operationId: api_v1_reviews_destroy
      description: Требуется указать идентификатор отзыва
      summary: Метод для удаления отзыва
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Отзыв.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/titles_filter/:
    get:
      operationId: api_v1_titles_filter_list
      parameters:
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: titles
        schema:
          type: array
          items:
            type: string
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
  /api/v1/will_read_bookmark/:
    get:
      operationId: api_v1_will_read_bookmark_list
      summary: Метод для получения списка книг из закладки "Буду читать"
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WillReadBookMark'
          description: ''
    post:
      operationId: api_v1_will_read_bookmark_create
      description: Требуется указать только идентификатор книги
      summary: Метод для добавления книг в закладку "Буду читать"
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WillReadBookMarkCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WillReadBookMarkCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WillReadBookMarkCreate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WillReadBookMarkCreate'
          description: ''
  /auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/users/:
    get:
      operationId: auth_users_list
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatePasswordRetype'
          description: ''
  /auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email/:
    post:
      operationId: auth_users_reset_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email_confirm/:
    post:
      operationId: auth_users_reset_email_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/users/set_email/:
    post:
      operationId: auth_users_set_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPasswordRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPasswordRetype'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPasswordRetype'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    AdminPanel:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/ForAdminBook'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/ForAdminGenre'
        authors:
          type: array
          items:
            $ref: '#/components/schemas/ForAdminAuthor'
      required:
      - authors
      - books
      - genres
    AuthorDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        fullname:
          type: string
          maxLength: 100
        author_books:
          type: array
          items:
            $ref: '#/components/schemas/BookSimple'
      required:
      - author_books
      - fullname
      - id
    AuthorList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        fullname:
          type: string
          maxLength: 100
      required:
      - fullname
      - id
      - url
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cover:
          type: string
          format: uri
          nullable: true
        title:
          type: string
          maxLength: 100
        summary:
          type: string
        pages:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        author:
          type: integer
          nullable: true
        genre:
          type: array
          items:
            type: integer
        file:
          type: string
          format: uri
          nullable: true
        author_name:
          type: string
          readOnly: true
      required:
      - author_name
      - genre
      - id
      - pages
      - summary
      - title
    BookDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        cover:
          type: string
          format: uri
          nullable: true
        summary:
          type: string
        author_name:
          type: string
          readOnly: true
        middle_star:
          type: integer
        pages:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        file:
          type: string
          format: uri
          nullable: true
        author:
          type: integer
          nullable: true
        genre:
          type: array
          items:
            $ref: '#/components/schemas/GenreSimple'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
      required:
      - author_name
      - genre
      - id
      - middle_star
      - pages
      - reviews
      - summary
      - title
    BookList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        cover:
          type: string
          format: uri
          nullable: true
        middle_star:
          type: integer
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - middle_star
      - title
      - url
    BookSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        cover:
          type: string
          format: uri
          nullable: true
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - title
      - url
    Favorite:
      type: object
      properties:
        book:
          type: integer
        user:
          type: integer
        book_title:
          type: string
          readOnly: true
      required:
      - book
      - book_title
      - user
    FavoriteCreate:
      type: object
      properties:
        book:
          type: integer
      required:
      - book
    FinishBookMark:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bookmarked_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        user:
          type: integer
        book:
          type: integer
      required:
      - book
      - bookmarked_date
      - id
      - user
    FinishBookMarkCreate:
      type: object
      properties:
        book:
          type: integer
      required:
      - book
    ForAdminAuthor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        fullname:
          type: string
          maxLength: 100
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - fullname
      - id
      - url
    ForAdminBook:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - title
      - url
    ForAdminGenre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre_name:
          allOf:
          - $ref: '#/components/schemas/GenreNameEnum'
          description: |-
            Выбери жанр

            * `Фэнтези` - ФЭНТЕЗИ
            * `Роман` - РОМАН
            * `Эпопея` - ЭПОПЕЯ
            * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
            * `Сказка/Притча` - СКАЗКА/ПРИТЧА
            * `Боевик` - БОЕВИК
            * `Повесть` - ПОВЕСТЬ
            * `Мистика` - МИСТИКА
            * `Детектив` - ДЕТЕКТИВ
            * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
            * `Триллер` - ТРИЛЛЕР
            * `Фикшн` - ФИКШН
            * `Проза` - ПРОЗА
            * `Мемуары` - МЕМУАРЫ
            * `Трагедия` - ТРАГЕДИЯ
            * `Приключения` - ПРИКЛЮЧЕНИЯ
            * `Поэзия` - ПОЭЗИЯ
            * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
            * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
            * `Биография` - БИОГРАФИЯ
            * `Сатира` - САТИРА
            * `Постмодернизм` - ПОСТМОДЕРНИЗМ
            * `Повседневность` - ПОВСЕДНЕВНОСТЬ
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - genre_name
      - id
      - url
    GenreDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre_name:
          allOf:
          - $ref: '#/components/schemas/GenreNameEnum'
          description: |-
            Выбери жанр

            * `Фэнтези` - ФЭНТЕЗИ
            * `Роман` - РОМАН
            * `Эпопея` - ЭПОПЕЯ
            * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
            * `Сказка/Притча` - СКАЗКА/ПРИТЧА
            * `Боевик` - БОЕВИК
            * `Повесть` - ПОВЕСТЬ
            * `Мистика` - МИСТИКА
            * `Детектив` - ДЕТЕКТИВ
            * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
            * `Триллер` - ТРИЛЛЕР
            * `Фикшн` - ФИКШН
            * `Проза` - ПРОЗА
            * `Мемуары` - МЕМУАРЫ
            * `Трагедия` - ТРАГЕДИЯ
            * `Приключения` - ПРИКЛЮЧЕНИЯ
            * `Поэзия` - ПОЭЗИЯ
            * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
            * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
            * `Биография` - БИОГРАФИЯ
            * `Сатира` - САТИРА
            * `Постмодернизм` - ПОСТМОДЕРНИЗМ
            * `Повседневность` - ПОВСЕДНЕВНОСТЬ
        genre_books:
          type: array
          items:
            $ref: '#/components/schemas/BookSimple'
      required:
      - genre_books
      - genre_name
      - id
    GenreList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre_name:
          allOf:
          - $ref: '#/components/schemas/GenreNameEnum'
          description: |-
            Выбери жанр

            * `Фэнтези` - ФЭНТЕЗИ
            * `Роман` - РОМАН
            * `Эпопея` - ЭПОПЕЯ
            * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
            * `Сказка/Притча` - СКАЗКА/ПРИТЧА
            * `Боевик` - БОЕВИК
            * `Повесть` - ПОВЕСТЬ
            * `Мистика` - МИСТИКА
            * `Детектив` - ДЕТЕКТИВ
            * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
            * `Триллер` - ТРИЛЛЕР
            * `Фикшн` - ФИКШН
            * `Проза` - ПРОЗА
            * `Мемуары` - МЕМУАРЫ
            * `Трагедия` - ТРАГЕДИЯ
            * `Приключения` - ПРИКЛЮЧЕНИЯ
            * `Поэзия` - ПОЭЗИЯ
            * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
            * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
            * `Биография` - БИОГРАФИЯ
            * `Сатира` - САТИРА
            * `Постмодернизм` - ПОСТМОДЕРНИЗМ
            * `Повседневность` - ПОВСЕДНЕВНОСТЬ
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - genre_name
      - id
      - url
    GenreNameEnum:
      enum:
      - Фэнтези
      - Роман
      - Эпопея
      - Романтическая комедия
      - Сказка/Притча
      - Боевик
      - Повесть
      - Мистика
      - Детектив
      - Хоррор/Ужасы
      - Триллер
      - Фикшн
      - Проза
      - Мемуары
      - Трагедия
      - Приключения
      - Поэзия
      - Старинная литература
      - Мифы. Легенды. Эпос
      - Биография
      - Сатира
      - Постмодернизм
      - Повседневность
      type: string
      description: |-
        * `Фэнтези` - ФЭНТЕЗИ
        * `Роман` - РОМАН
        * `Эпопея` - ЭПОПЕЯ
        * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
        * `Сказка/Притча` - СКАЗКА/ПРИТЧА
        * `Боевик` - БОЕВИК
        * `Повесть` - ПОВЕСТЬ
        * `Мистика` - МИСТИКА
        * `Детектив` - ДЕТЕКТИВ
        * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
        * `Триллер` - ТРИЛЛЕР
        * `Фикшн` - ФИКШН
        * `Проза` - ПРОЗА
        * `Мемуары` - МЕМУАРЫ
        * `Трагедия` - ТРАГЕДИЯ
        * `Приключения` - ПРИКЛЮЧЕНИЯ
        * `Поэзия` - ПОЭЗИЯ
        * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
        * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
        * `Биография` - БИОГРАФИЯ
        * `Сатира` - САТИРА
        * `Постмодернизм` - ПОСТМОДЕРНИЗМ
        * `Повседневность` - ПОВСЕДНЕВНОСТЬ
    GenreSimple:
      type: object
      properties:
        genre_name:
          allOf:
          - $ref: '#/components/schemas/GenreNameEnum'
          description: |-
            Выбери жанр

            * `Фэнтези` - ФЭНТЕЗИ
            * `Роман` - РОМАН
            * `Эпопея` - ЭПОПЕЯ
            * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
            * `Сказка/Притча` - СКАЗКА/ПРИТЧА
            * `Боевик` - БОЕВИК
            * `Повесть` - ПОВЕСТЬ
            * `Мистика` - МИСТИКА
            * `Детектив` - ДЕТЕКТИВ
            * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
            * `Триллер` - ТРИЛЛЕР
            * `Фикшн` - ФИКШН
            * `Проза` - ПРОЗА
            * `Мемуары` - МЕМУАРЫ
            * `Трагедия` - ТРАГЕДИЯ
            * `Приключения` - ПРИКЛЮЧЕНИЯ
            * `Поэзия` - ПОЭЗИЯ
            * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
            * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
            * `Биография` - БИОГРАФИЯ
            * `Сатира` - САТИРА
            * `Постмодернизм` - ПОСТМОДЕРНИЗМ
            * `Повседневность` - ПОВСЕДНЕВНОСТЬ
      required:
      - genre_name
    Genres:
      type: object
      properties:
        genre_name:
          allOf:
          - $ref: '#/components/schemas/GenreNameEnum'
          description: |-
            Выбери жанр

            * `Фэнтези` - ФЭНТЕЗИ
            * `Роман` - РОМАН
            * `Эпопея` - ЭПОПЕЯ
            * `Романтическая комедия` - РОМАНТИЧЕСКАЯ КОМЕДИЯ
            * `Сказка/Притча` - СКАЗКА/ПРИТЧА
            * `Боевик` - БОЕВИК
            * `Повесть` - ПОВЕСТЬ
            * `Мистика` - МИСТИКА
            * `Детектив` - ДЕТЕКТИВ
            * `Хоррор/Ужасы` - ХОРРОР/УЖАСЫ
            * `Триллер` - ТРИЛЛЕР
            * `Фикшн` - ФИКШН
            * `Проза` - ПРОЗА
            * `Мемуары` - МЕМУАРЫ
            * `Трагедия` - ТРАГЕДИЯ
            * `Приключения` - ПРИКЛЮЧЕНИЯ
            * `Поэзия` - ПОЭЗИЯ
            * `Старинная литература` - СТАРИННАЯ ЛИТЕРАТУРА
            * `Мифы. Легенды. Эпос` - МИФЫ. ЛЕГЕНДЫ. ЭПОС
            * `Биография` - БИОГРАФИЯ
            * `Сатира` - САТИРА
            * `Постмодернизм` - ПОСТМОДЕРНИЗМ
            * `Повседневность` - ПОВСЕДНЕВНОСТЬ
        genres:
          type: array
          items:
            $ref: '#/components/schemas/SimilarGenre'
      required:
      - genre_name
      - genres
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedProfile:
      type: object
      properties:
        user_photo:
          type: string
          format: uri
          nullable: true
        username:
          type: string
          nullable: true
          maxLength: 30
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        gender:
          type: string
          nullable: true
          maxLength: 15
    PatchedReviewCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: integer
          nullable: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 275
        username:
          type: string
          maxLength: 30
        password:
          type: string
          writeOnly: true
    Profile:
      type: object
      properties:
        user_photo:
          type: string
          format: uri
          nullable: true
        username:
          type: string
          nullable: true
          maxLength: 30
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        gender:
          type: string
          nullable: true
          maxLength: 15
    ReadingBookMark:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bookmarked_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        user:
          type: integer
          nullable: true
        book:
          type: integer
          nullable: true
      required:
      - bookmarked_date
      - id
    ReadingBookMarkCreate:
      type: object
      properties:
        book:
          type: integer
          nullable: true
    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        get_user:
          type: string
          readOnly: true
        get_book:
          type: string
          readOnly: true
        text:
          type: string
          nullable: true
          description: Оставь комментарии
        created_date:
          type: string
          format: date-time
          readOnly: true
        updated_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          title: Пользователь
        book:
          type: integer
          nullable: true
      required:
      - created_date
      - get_book
      - get_user
      - id
      - updated_date
      - user
    ReviewCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: integer
          nullable: true
      required:
      - id
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPasswordRetype:
      type: object
      properties:
        new_password:
          type: string
        re_new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
      - re_new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 275
      required:
      - current_password
      - new_email
    SimilarGenre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        simil_name:
          type: string
          nullable: true
          maxLength: 100
        genre:
          type: integer
          nullable: true
      required:
      - id
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 275
        username:
          type: string
          maxLength: 30
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - username
    UserCreatePasswordRetype:
      type: object
      properties:
        username:
          type: string
          maxLength: 30
        email:
          type: string
          format: email
          maxLength: 275
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
        re_password:
          type: string
      required:
      - email
      - id
      - password
      - re_password
      - username
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 275
      required:
      - new_email
    WillReadBookMark:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bookmarked_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        user:
          type: integer
        book:
          type: integer
      required:
      - book
      - bookmarked_date
      - id
      - user
    WillReadBookMarkCreate:
      type: object
      properties:
        book:
          type: integer
      required:
      - book
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
